/**
 * File:	include/mail-server/dialogs.ycp
 * Package:	Configuration of mail-server
 * Summary:	Dialogs definitions
 * Authors:	Peter Varkoly <varkoly@suse.de>
 *
 * $Id$
 */

{

textdomain "MailServer";

import "Label";
import "Wizard";
import "YaPI::MailServer";

include "mail-server/helps.ycp";

/**
 * AuthorizingDialog
 * The adminstrator user will be authorized
 * @return dialog result
 */
define any AuthorizingDialog () {
    string caption = _("Mail Server Administrator Authorization.");
    term contents = `HBox(
			   `VBox(
                              `Password(`id(`password),  _("Enter Administrator Password:"), "")
			        )
                         );

    Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
	    Label::BackButton(), Label::NextButton());

    UI::SetFocus (`id (`password));

    any ret = nil;
    while(true) {

        ret = UI::UserInput();

        MailServer::AdminPassword  = (string) UI::QueryWidget(`id(`password), `Value);

        /* abort? */
        if(ret == `abort || ret == `cancel) {
            if(ReallyAbort()) break;
            else continue;
        } else if(ret == `next) {
                MailServer::LDAPDefaults = (map<string,any>) YaPI::MailServer::ReadLDAPDefaults(
                                                                MailServer::AdminPassword);
                if (MailServer::LDAPDefaults == nil) {
			Popup::Error(_("Unable to authorize the Administrator User"));
			continue;
		}
                return ret;
	} else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;

}

list<map> GenerateTree(list<map> Tree, string parent, list<list> input) {

    foreach(list i, input, ``{
            string title = i[0]:"";
            list<list> children = i[1]:[];
            Tree = Wizard::AddTreeItem(Tree , parent,  title, title );
            if (size(children) > 0 ) {
                Tree = GenerateTree(Tree, title, children);
            }
    });
    return Tree;
}

term GlobalSettingsDialog() {
  boolean limit     = ((string)MailServer::GlobalSettings["MaximumMailSize"]:"0" != "0");
  boolean is_DNS    = ((string)MailServer::GlobalSettings["SendingMail","Type"]:"" == "DNS");
  boolean is_NONE   = ((string)MailServer::GlobalSettings["SendingMail","Type"]:"" == "NONE");
  boolean is_RELAY  = ((string)MailServer::GlobalSettings["SendingMail","Type"]:"" == "relayhost");
  boolean TLS_NONE  = ((string)MailServer::GlobalSettings["SendingMail","TLS"]:""  == "NONE");
  boolean TLS_MAY   = ((string)MailServer::GlobalSettings["SendingMail","TLS"]:""  == "MAY");
  boolean TLS_MUST  = ((string)MailServer::GlobalSettings["SendingMail","TLS"]:""  == "MUST");
  boolean TLS_MUSTN = ((string)MailServer::GlobalSettings["SendingMail","TLS"]:""  == "MUST_NOPEERMATCH");
  boolean auth      = ((string)MailServer::GlobalSettings["SendingMail","RelayHost","Auth"]:"0" == "1");
  string  hostname  = (string)MailServer::GlobalSettings["SendingMail","RelayHost","Name"]:"";
  string  account   = (string)MailServer::GlobalSettings["SendingMail","RelayHost","Account"]:"";
  string  password  = (string)MailServer::GlobalSettings["SendingMail","RelayHost","Password"]:"";

  // I don't know if it hase a sence to use MUST_NOPEERMATCH.
  if(TLS_MUSTN){ TLS_MUST = TLS_MUSTN; }


  term  relayhost =  `VBox(
                    `TextEntry(`id(`RelayHostName), _("Hostname / IP"), hostname),
                    `CheckBox(`id(`RelayHostAuth), `opt (`notify),  _("Relay host need Authentication"), auth),
                    `Frame("",
                      `VBox(
                        `TextEntry(`id(`RelayHostAccount),  _("Account"), account),
                        `Password(`id(`Password1),  _("Password"), password),
                        `Password(`id(`Password2),  _("Confirm Passowrd"), password)
                       )
                     )
                   );
  if( is_RELAY && ! auth) {
       relayhost =  `VBox(
                    `TextEntry(`id(`RelayHostName), _("Hostname / IP"), hostname),
                    `CheckBox(`id(`RelayHostAuth),  `opt (`notify), _("Relay host need Authentication"), auth),
                    `Frame("",
                      `VBox(
                        `TextEntry(`id(`RelayHostAccount),  `opt(`disabled), _("Account"), account),
                        `Password(`id(`Password1), `opt(`disabled), _("Password"), password),
                        `Password(`id(`Password2), `opt(`disabled), _("Confirm Passowrd"), password)
                       )
                     )
                   );
  } else if( ! is_RELAY ) {
       relayhost =  `VBox(
                    `TextEntry(`id(`RelayHostName), `opt(`disabled), _("Hostname / IP"), hostname),
                    `CheckBox(`id(`RelayHostAuth),      `opt(`disabled), _("Relay host need Authentication"), auth),
                    `Frame("",
                      `VBox(
                        `TextEntry(`id(`RelayHostAccount),  `opt(`disabled), _("Account"), account),
                        `Password(`id(`Password1), `opt(`disabled), _("Password"), password),
                        `Password(`id(`Password2), `opt(`disabled), _("Confirm Passowrd"), password)
                       )
                     )
                   );
  }

  term MaximumMailSize = `TextEntry(`id(`MaximumMailSize), "",(string)MailServer::GlobalSettings["MaximumMailSize"]:"");
  if(!limit) {
    MaximumMailSize = `TextEntry(`id(`MaximumMailSize), `opt(`disabled),"",(string)MailServer::GlobalSettings["MaximumMailSize"]:"");
  }

  term content = `VBox (
       `Frame(_("Message Size"),
         `RadioButtonGroup(`id(`MailSize),
           `HBox(
             `RadioButton(`id("MailSizeNoLimit"), `opt (`notify), _("No Limit"), !limit),
             `RadioButton(`id("MailSizeLimit"), `opt (`notify), _("Maximum Mail Size"), limit),
             MaximumMailSize,
             `Label("KByte")
            )
          )
        ),
       `VStretch(),
       `Frame(_("Server Identification"),
            `TextEntry(`id(`Banner), "" ,(string)MailServer::GlobalSettings["Banner"]:"SuSE Linux Mail Server")
        ),
       `VStretch(),
       `Frame(_("Outgoing Mails"),
         `HBox(
           `HWeight(1,
              `VBox(
                `VStretch(),
                `RadioButtonGroup(`id(`SendingMailType),
                  `VBox(
                    `Left(`RadioButton(`id("relayhost"), `opt (`notify), _("Use Relay Host"), is_RELAY)),
                    `Left(`RadioButton(`id("DNS"),       `opt (`notify), _("Direct Delivery (DNS)"), is_DNS)),
                    `Left(`RadioButton(`id("NONE"),      `opt (`notify), _("No Outgoing Mail"), is_NONE))
                   )
                 ),
                `VStretch(),
                `RadioButtonGroup(`id(`SendingMailTLS),
                   `HBox(
                      `Frame(_("Security"),
                        `VBox(
                           `Left(`RadioButton(`id("NONE"),             _("Do not use TLS"), TLS_NONE)),
                           `Left(`RadioButton(`id("MAY"),              _("Use TLS if Possible"), TLS_MAY)),
                           `Left(`RadioButton(`id("MUST"),             _("Enforce TLS"), TLS_MUST))
      //                  ,`Left(`RadioButton(`id("MUST_NOPEERMATCH"), _("Use TLS but do not check CA"), TLS_MUSTN))
                         )
                      ),
                      `HStretch()
                   )
                 ),
                `VStretch()
               )
            ),
           `HWeight(1,
              `VBox(
                `Frame(_("Relay Host Settings"),relayhost
                 )
               )
            )
          )
        )
   );

  return content;
}

term MailTransportsDialog(string CID) {
  list<map<string,string> > Transports      = (list<map<string,string> >) MailServer::MailTransports["Transports"]:[];
  list      Transport_items = [];
  string    TransportID     = "";
  string    Destination     = "";
  boolean   Subdomains      = true;
  string    Protocol        = "smtp";
  map<string,list<term> > Protocols = $[ "smtp":[ `item(`id("smtp"),  "smtp", true ),
                                          `item(`id("uucp"),  "uucp" ),
                                          `item(`id("slow"),  "slow" ),
                                          `item(`id("error"), "error" ) ],
				 "uucp":[ `item(`id("smtp"),  "smtp" ),
                                          `item(`id("uucp"),  "uucp", true ),
                                          `item(`id("slow"),  "slow" ),
                                          `item(`id("error"), "error" ) ],
				 "slow":[ `item(`id("smtp"),  "smtp" ),
                                          `item(`id("uucp"),  "uucp" ),
                                          `item(`id("slow"),  "slow", true ),
                                          `item(`id("error"), "error" ) ],
				 "error":[`item(`id("smtp"),  "smtp" ),
                                          `item(`id("uucp"),  "uucp" ),
                                          `item(`id("slow"),  "slow" ),
                                          `item(`id("error"), "error", true ) ]
			      ];
  string    Server          = "";
  boolean   NOMX            = true;
  string    TLS             = "";
  boolean   Auth            = false;
  string    Account         = "";
  string    Password        = "";
  boolean   TransportTLSnone    = false;
  boolean   TransportTLSuse     = true;
  boolean   TransportTLSenforce = false;


  foreach(map Transport,Transports, ``{
    TransportID = Transport["Destination"]:"";
//    term my_item = `item( `id(TransportID), Transport["Destination"]:""+" | "+
//                                            Transport["Nexthop"]:""+" | "+
//                                            Transport["Transport"]:""+" | "+
//					    Transport["TLS"]:"");
    term my_item = `item( `id(TransportID), Transport["Destination"]:"",
                                            Transport["Nexthop"]:"",
                                            Transport["Transport"]:"",
                                            Transport["TLS"]:"");

    if(CID == TransportID) {
      Destination = Transport["Destination"]:"";
      TLS         = Transport["TLS"]:"";
      Auth        = ((string)Transport["Auth"]:"0" == "1");
      Account     = Transport["Account"]:"";
      Password    = Transport["Password"]:"";
      if( find(Transport["Nexthop"]:"", "\[") > -1) {
        Server = deletechars(Transport["Nexthop"]:"","[");
        Server = deletechars(Server,"]");
      } else {
        Server = Transport["Nexthop"]:"";
	NOMX   = false;
      }
      if(TLS == "NONE") {
        TransportTLSnone    = true;
	TransportTLSuse     = false;
	TransportTLSenforce = false;
      }else if(TLS == "MUST"){
        TransportTLSnone    = false;
	TransportTLSuse     = false;
	TransportTLSenforce = true;
      }
//      my_item = `item( `id(TransportID), Transport["Destination"]:""+" | "+
//                                         Transport["Nexthop"]:""+" | "+
//                                         Transport["Transport"]:""+" | "+
//                                         Transport["TLS"]:"",true);
    }
    Transport_items = add(Transport_items,my_item);
  });

  term TransportAuth  = `VBox(
    `Left(`CheckBox (`id(`Auth),     `opt (`notify), _("Server need Authentication"), true)),
    `Left(`TextEntry(`id(`Account),   _("Account"),          Account)),
    `Left(`Password (`id(`Password1), _("Password"),         Password)),
    `Left(`Password (`id(`Password2), _("Confirm Passowrd"), Password))
  );
  if(!Auth) {
    TransportAuth  = `VBox(
      `Left(`CheckBox (`id(`Auth),      `opt (`notify),  _("Server need Authentication"),       false)),
      `Left(`TextEntry(`id(`Account),   `opt(`disabled), _("Account"),          Account)),
      `Left(`Password (`id(`Password1), `opt(`disabled), _("Password"),         Password)),
      `Left(`Password (`id(`Password2), `opt(`disabled), _("Confirm Passowrd"), Password))
    );
  }


  term content = `VBox (
     `Frame(_("Manage Mail Routing"),
       `VBox(
         `HBox(
           `VBox(
             `Left(`TextEntry(`id(`Destination), _("Destination"),     Destination)),
             `Left(`CheckBox (`id(`Subdomains),  _("With Subdomains"), Subdomains)),
             `Left(`HBox(`Label(_("Transport")),`ComboBox (`id(`Protocol), "", Protocols[Protocol]:nil))),
             `Left(`TextEntry(`id(`Server),      _("Server"),     Server)),
             `Left(`CheckBox (`id(`NOMX),        _("Suppress MX Lookups"), NOMX))
            ),
           `Frame(_("Security"),
             `HBox(
               `RadioButtonGroup(`id(`TLS),
                 `VBox(
                   `Left(`RadioButton(`id("NONE"),  _("No TLS"),     TransportTLSnone)),
                   `Left(`RadioButton(`id("MAY"),   _("Use TLS"),    TransportTLSuse)),
                   `Left(`RadioButton(`id("MUST"),  _("Enforce TLS"),TransportTLSenforce))
                  )
                ),
                TransportAuth
              )
            )
          ),
         `HBox(
           `PushButton(`id(`Add),   _("Add")),
           `PushButton(`id(`Edit),  _("Edit")),
           `PushButton(`id(`Delete),_("Delete")),
           `PushButton(`id(`Clean), _("Clean Fields"))
          )
        )
      ),
     `Frame(_("Defined Mail Transport Routen"),
       `HBox(
         //`SelectionBox(`id(`Table), `opt (`notify),_("Destination | Server | Transport | Security"),Transport_items)
         `Table(`id(`table), `opt (`notify),`header(_("Destination"),_("Server"),_("Transport"),_("Security")),Transport_items)
        )
      )
   );
  return content;
}

term MailPreventionDialog(string CID, string CIDRBL) {
  list<term>     AccessItems= [];
  list<term>     RBLItems   = [];
  string  BasicProtection   =  (string)MailServer::MailPrevention["BasicProtection"]:"";
  list<string> RBLList      = (list<string>) MailServer::MailPrevention["RBLList"]:[];
  list<map<string,string> > AccessList = (list<map<string,string> >) MailServer::MailPrevention["AccessList"]:[];
  boolean VirusScanning     = ((string)MailServer::MailPrevention["VirusScanning"]:"0" == "1");
  boolean BasicProtectionOff    = false;
  boolean BasicProtectionMedium = false;
  boolean BasicProtectionHard   = true;
  if(BasicProtection == "off"){
     BasicProtectionOff     = true;
     BasicProtectionHard    = false;
  } else if(BasicProtection == "medium"){
     BasicProtectionMedium  = true;
     BasicProtectionHard    = false;
  }

  foreach(map<string,string> Access, AccessList, ``{
    term my_item = `item( `id(Access["MailClient"]:""), Access["MailClient"]:"", 
                                                        select(splitstring(Access["MailAction"]:""," "),0,""),
							substring(Access["MailAction"]:"",find(Access["MailAction"]:""," "))
                        );
    AccessItems = add(AccessItems,my_item);
  });

  foreach(string RBLServer, RBLList, ``{
    term my_item = `item( `id(RBLServer), RBLServer);
    RBLItems     = add(RBLItems,my_item);
  });

  term content = `VBox (
	`Frame(_("SPAM Prevention"),
	  `HBox(
	    `RadioButtonGroup(`id(`BasicProtection),
	      `VBox(
	        `Left(`RadioButton(`id("off"),    `opt(`notify), _("Off"),    BasicProtectionOff)),
	        `Left(`RadioButton(`id("medium"), `opt(`notify), _("Medium"), BasicProtectionMedium)),
	        `Left(`RadioButton(`id("hard"),   `opt(`notify), _("Hard"),   BasicProtectionHard))
	       )
	     ),
	      `VBox(`SelectionBox(`id(`RBLList), "Confiugred RBL Server",RBLItems)
	     ),
	     `VBox(
	        `Left(`PushButton(`id(`RBLAdd),   _("Add"))),
		`Left(`PushButton(`id(`RBLDelete),_("Delete")))
	     )
	   )
         ),
	`Frame(_("Sender Restrictions"),
	  `HBox(
	      `VBox(
	        `Table(`id(`table), `opt (`notify),`header(_("Sender Address"),_("Action"),_("Option")),AccessItems)
	       ),
	      `VBox(
	        `PushButton(`id(`AccessAdd),   _("Add")),
		`PushButton(`id(`AccessDelete),_("Delete"))
	       )
	   )
	 ),
	`Frame(_("Virus Scanning"),
	  `HBox(
               `Left(`CheckBox (`id(`VirusScanning), `opt(`notify), _("Start Virus Scanner AMAVIS"), VirusScanning))
	   )
	 )
   );
   return content;
}

term RBLAdd () {
   return `Frame(_("Add New RBL Server"),
            `VBox(
              `TextEntry(`id(`NewRBLServer),  "",  ""),
	      `PushButton(`id(`AddNewRBLServer),   _("OK"))
	     )
	   );
}

term AccessAdd () {
   return `Frame(_("Add New Sender Restriction"),
            `VBox(
              `TextEntry(`id(`NewSender),  "Sender Address",  ""),
	      `ComboBox (`id(`NewSenderAction), _("Action"), [ "REJECT", "DEFER_IF_REJECT","DEFER_IF_PERMIT",
	                                                       "OK", "DUNNO", "PREPEND", "HOLD", "DISCARD",
							       "FILTER", "REDIRECT", "" ]),
              `TextEntry(`id(`NewSenderOption),  "Option",  ""),
	      `PushButton(`id(`AddNewSender),   _("OK"))
	     )
	   );
}

term MailRelayingDialog() {
  boolean UserRestriction = ((string)MailServer::MailRelaying["UserRestriction"]:"0" == "1");
  boolean RequireSASL     = ((string)MailServer::MailRelaying["RequireSASL"]:"0" == "1");
  boolean SMTPDTLSnone    = ((string)MailServer::MailRelaying["SMTPDTLSMode"]:"none" == "none");
  boolean SMTPDTLSuse     = ((string)MailServer::MailRelaying["SMTPDTLSMode"]:"none" == "use");
  boolean SMTPDTLSenforce = ((string)MailServer::MailRelaying["SMTPDTLSMode"]:"none" == "enforce");
  boolean SMTPDTLSauth_only = ((string)MailServer::MailRelaying["SMTPDTLSMode"]:"none" == "auth_only");
  list<string> Networks     = (list<string>) MailServer::MailRelaying["TrustedNetworks"]:[];
  list    Network_items     = [];
  integer NetworkID         = 1;

  foreach(string Network, Networks, ``{
    term my_item = `item( `id(NetworkID), Network);
    Network_items = add(Network_items,my_item);
    NetworkID = NetworkID+1;
  });

   term security = `HBox(
        `VBox(
          `Left(`CheckBox(`id(`UserRestriction),`opt (`notify),_("Use User/Group Based Restrictions"),UserRestriction)),
          `Left(`CheckBox(`id(`RequireSASL),_("Require SASL Authentication"),RequireSASL))
         ),
        `Frame(_("TLS Mode for the SMTPD Daemon"),
          `RadioButtonGroup(`id(`SMTPDTLSMode),
             `VBox(
                `Left(`RadioButton(`id("none"),     _("No TLS"),SMTPDTLSnone)),
                `Left(`RadioButton(`id("use"),      _("Use TLS"),SMTPDTLSuse)),
                `Left(`RadioButton(`id("enforce"),  _("Enforce TLS"),SMTPDTLSenforce)),
                `Left(`RadioButton(`id("auth_only"),_("Use TLS only for SASL authentication"),SMTPDTLSauth_only))
              )
           )
         )
      );
  if(UserRestriction){
    security = `HBox(
        `VBox(
          `Left(`CheckBox(`id(`UserRestriction),`opt (`notify), _("Use User/Group Based Restrictions"),true)),
          `Left(`CheckBox(`id(`RequireSASL),    `opt(`disabled),_("Require SASL Authentication"),true))
         ),
        `Frame(_("TLS Mode for the SMTPD Daemon"),
          `RadioButtonGroup(`id(`SMTPDTLSMode),
             `VBox(
                `Left(`RadioButton(`id("none"),     `opt(`disabled), _("No TLS"),     false)),
                `Left(`RadioButton(`id("use"),      `opt(`disabled), _("Use TLS"),    false)),
                `Left(`RadioButton(`id("enforce"),  _("Enforce TLS"),SMTPDTLSenforce)),
                `Left(`RadioButton(`id("auth_only"),_("Use TLS only for SASL authentication"),SMTPDTLSauth_only))
              )
           )
         )
      );
  }
  term content = `VBox (
     `Frame(_("Trusted Local Networks"),
       `VBox(
         `Frame(_("New Network"),
           `HBox(
               `TextEntry(`id(`NewNetwork),     "", ""),
               `PushButton(`id(`AddNewNetwork), _("Add"))
            )
          ),
         `Frame(_("Defined Trusted Networks"),
           `HBox(
//             `Table(`id(`TrustedNetworks), `header(_("Network")),Network_items),
             `SelectionBox(`id(`TrustedNetworks), "",Networks),
             `PushButton(`id(`DeleteNetwork), _("Delete"))
            )
          )
       )
     ),
    `Frame(_("Security Settings for Sending Mail via the Server"),security)
   );
  return content;
}

term MailLocalDeliveryDialog() {
  boolean TypeCYRUS    = ((string)MailServer::LocalDelivery["Type"]:"" == "cyrus");
  boolean TypePROCMAIL = ((string)MailServer::LocalDelivery["Type"]:"" == "procmail");
  boolean TypeLOCAL    = ((string)MailServer::LocalDelivery["Type"]:"" == "local");
  boolean TypeNONE     = ((string)MailServer::LocalDelivery["Type"]:"" == "none");

  term settings = `HBox();
  term content = `VBox (
      `Frame(_("Local Delivery Type"),
         `RadioButtonGroup(`id(`Type),
            `HBox(
	        `RadioButton(`id("cyrus"),    `opt(`notify), _("Cyrus IMAP"), TypeCYRUS),
	        `RadioButton(`id("procmail"), `opt(`notify), _("Procmail"),   TypePROCMAIL),
	        `RadioButton(`id("local"),    `opt(`notify), _("Filesystem"), TypeLOCAL),
	        `RadioButton(`id("none"),     `opt(`notify), _("Filesystem"), TypeNONE)
	     )
          )
      )
   );
  return content;
}

term FetchingMailDialog() {
  term content = `VBox (
   );
  return content;
}

term MailLocalDomainsDialog() {
  term content = `VBox (
   );
  return content;
}

any ComplexDialog() {

   Wizard::CreateTreeDialog();
   list<map> Tree = GenerateTree([], "", MailServer::ModulesTreeContent) ;
   Wizard::CreateTree(Tree, _("&Mail Server Configuration Modules"));

   string helptext = "Bla Bla Bla";
   term content = GlobalSettingsDialog();
   string FocusedContent = "GlobalSettings";

   string CID = ""; //CurrentItem
   string CIDRBL = ""; //CurrentItem

   Wizard::SetContents(_("Mail Server Configuration"), content ,helptext, true, true);
   UI::WizardCommand(`SetBackButtonLabel( "" ) );
   UI::WizardCommand(`SetNextButtonLabel( _("Save") ) );

   any ret       = nil;
   any EventType = nil;
   while(ret != `cancel && ret != `abort && ret != `next )
   {
        boolean focus_changed     = false;
        string  OldFocusedContent = FocusedContent;
        map event = UI::WaitForEvent();
        ret       = event["ID"]:nil;
        EventType = event["EventType"]:nil;

        //If anithing happenend we save the changes into the global maps
        if(FocusedContent == "GlobalSettings") {
           MailServer::GlobalSettings["Changed"]            = true;
           if(UI::QueryWidget(`id(`MailSize), `CurrentButton) == "MailSizeLimit") {
             MailServer::GlobalSettings["MaximumMailSize"]    = UI::QueryWidget(`id(`MaximumMailSize), `Value);
             if(UI::QueryWidget(`id(`MaximumMailSize), `Value) == "0" ) {
               MailServer::GlobalSettings["MaximumMailSize"]    = "1";
             }
           } else {
             MailServer::GlobalSettings["MaximumMailSize"]    = "0";
           }
           MailServer::GlobalSettings["Banner"]             = UI::QueryWidget(`id(`Banner), `Value);
           MailServer::GlobalSettings["SendingMail","Type"] = UI::QueryWidget(`id(`SendingMailType), `CurrentButton);
           MailServer::GlobalSettings["SendingMail","TLS"]  = UI::QueryWidget(`id(`SendingMailTLS), `CurrentButton);
           MailServer::GlobalSettings["SendingMail","RelayHost","Name"]     = "";
           MailServer::GlobalSettings["SendingMail","RelayHost","Auth"]     = "0";
           MailServer::GlobalSettings["SendingMail","RelayHost","Account"]  = "";
           MailServer::GlobalSettings["SendingMail","RelayHost","Password"] = "";

           if(MailServer::GlobalSettings["SendingMail","Type"]:"relayhost" == "relayhost"){
              MailServer::GlobalSettings["SendingMail","RelayHost","Name"] = UI::QueryWidget(`id(`RelayHostName), `Value);
              if((boolean)UI::QueryWidget(`id(`RelayHostAuth), `Value)){
                string password1 = (string)UI::QueryWidget(`id(`Password1), `Value);
                string password2 = (string)UI::QueryWidget(`id(`Password2), `Value);
                if( password1 != password2) {
                    Report::Error(_("The passwords are not identical."));
                    continue;
                }
                MailServer::GlobalSettings["SendingMail","RelayHost","Auth"]     = "1";
                MailServer::GlobalSettings["SendingMail","RelayHost","Account"]  = UI::QueryWidget(`id(`RelayHostAccount), `Value);
                MailServer::GlobalSettings["SendingMail","RelayHost","Password"] = password1;
              }
           }
           content        = GlobalSettingsDialog();
           helptext       = HELPS["GlobalSettings"]:"Bla Bla Bla";
        } else if(FocusedContent == "MailTransports") {
           if( ret == `Auth ) {
	      if((boolean)UI::QueryWidget(`id(`Auth), `Value)){
	        UI::ChangeWidget(`id(`Account),   `Enabled, true);
		UI::ChangeWidget(`id(`Password1), `Enabled, true);
		UI::ChangeWidget(`id(`Password2), `Enabled, true);
	      } else {
	        UI::ChangeWidget(`id(`Account),   `Enabled, false);
		UI::ChangeWidget(`id(`Password1), `Enabled, false);
		UI::ChangeWidget(`id(`Password2), `Enabled, false);
	      }
	      continue;
           }
           MailServer::MailTransports["Changed"] = true;
	   list<map> Transports  = (list<map>) MailServer::MailTransports["Transports"]:[];
	   if(size ((list) MailServer::MailTransports["Transports"]:[]) > 0) {
	         CID = (string)(UI::QueryWidget(`id(`table), `CurrentItem));
           }
           //Now we generate the new/edited entry
           string password1 = (string)UI::QueryWidget(`id(`Password1), `Value);
           string password2 = (string)UI::QueryWidget(`id(`Password2), `Value);
	   map NewTransport = $[];
           NewTransport["Destination"] = (string)UI::QueryWidget(`id(`Destination), `Value);
           NewTransport["Transport"]   = (string)UI::QueryWidget(`id(`Protocol), `Value);
           NewTransport["Nexthop"]     = (string)UI::QueryWidget(`id(`Server), `Value);
           if(NewTransport["Transport"]:"smtp" != "error" ) {
             NewTransport["TLS"]         = (string)UI::QueryWidget(`id(`TLS), `CurrentButton);
             if((boolean)UI::QueryWidget(`id(`Auth), `Value)){
               NewTransport["Auth"]      = "1";
               NewTransport["Account"]   = (string)UI::QueryWidget(`id(`Account), `Value);
               NewTransport["Password"]  = password1;
             }
             if((boolean)UI::QueryWidget(`id(`NOMX), `Value)){
               NewTransport["Nexthop"] = "["+NewTransport["Nexthop"]:""+"]";
             }
           }
           if(ret == `Add || ret == `Edit) {
           //TODO Checking if the attributes are correct & that Destination is unique
               if(regexpmatch(NewTransport["Destination"]:"","[ öä#+ü]") || NewTransport["Destination"]:"" == ""){
                    Report::Error(_("The destination is invalid."));
                    continue;
               }
               if(ret == `Add) {
                  list TR = [];
                  foreach(map Transport, Transports, ``{
                    TR = add(TR,Transport["Destination"]:"");
                  });
                  //TODO search for .<domainname to>
		  if(contains( TR, NewTransport["Destination"]:"")) {
                     Report::Error(_("There is already a transport defined for this destination."));
                     continue;
		  }
               }
           }
	   if(ret == `Add) {
              if((boolean)UI::QueryWidget(`id(`Auth), `Value)){
                if( password1 != password2) {
                    Report::Error(_("The passwords are not identical."));
                    continue;
                }
              }
	      MailServer::MailTransports["Transports"] = [];
	      foreach(map Transport, Transports, ``{
	        MailServer::MailTransports["Transports"] = add(MailServer::MailTransports["Transports"]:[],Transport);
		if(Transport["Destination"]:"" == CID) {
	          MailServer::MailTransports["Transports"] = add(MailServer::MailTransports["Transports"]:[],NewTransport);
                  if((boolean)UI::QueryWidget(`id(`Subdomains), `Value)){
                    NewTransport["Destination"] = "."+NewTransport["Destination"]:"";
	            MailServer::MailTransports["Transports"] = add(MailServer::MailTransports["Transports"]:[],NewTransport);
                  }
		}
	      });
	      if(size ((list) MailServer::MailTransports["Transports"]:[]) == 0) {
	        MailServer::MailTransports["Transports"] = add(MailServer::MailTransports["Transports"]:[],NewTransport);
                if((boolean)UI::QueryWidget(`id(`Subdomains), `Value)){
                   NewTransport["Destination"] = "."+NewTransport["Destination"]:"";
	           MailServer::MailTransports["Transports"] = add(MailServer::MailTransports["Transports"]:[],NewTransport);
                }
	      }
              CID = NewTransport["Destination"]:"";
	   } else if(ret == `Edit) {
              if((boolean)UI::QueryWidget(`id(`Auth), `Value)){
                if( password1 != password2) {
                    Report::Error(_("The passwords are not identical."));
                    continue;
                }
              }
	      MailServer::MailTransports["Transports"] = [];
	      foreach(map Transport, Transports, ``{
		if(Transport["Destination"]:"" == CID) {
	          MailServer::MailTransports["Transports"] = add(MailServer::MailTransports["Transports"]:[],NewTransport);
		} else {
	          MailServer::MailTransports["Transports"] = add(MailServer::MailTransports["Transports"]:[],Transport);
                }
	      });
              CID = NewTransport["Destination"]:"";
	   } else if (ret == `Delete) {
	      MailServer::MailTransports["Transports"] = [];
	      foreach(map Transport, Transports, ``{
		if(Transport["Destination"]:"" != CID) {
                  //TODO search for .<domainname to>
	           MailServer::MailTransports["Transports"] = add(MailServer::MailTransports["Transports"]:[],Transport);
		}
	      });
	   } else if (ret == `Clean) {
               CID = "";
           }
	   content        = MailTransportsDialog(CID);
	   helptext       = HELPS["MailTransports"]:"Bla Bla Bla";
        } else if(FocusedContent == "MailPrevention") {
	  if(ret == `RBLAdd) {
	    UI::OpenDialog( RBLAdd());
	    continue;
	  }
	  if(ret == `AccessAdd) {
	    UI::OpenDialog( AccessAdd());
	    continue;
	  }
	  MailServer::MailPrevention["Changed"] = true;
	  if(ret == `AddNewRBLServer) {
	    string NewRLBServer = (string)UI::QueryWidget(`id(`NewRBLServer), `Value);
	    MailServer::MailPrevention["RBLList"] = add((list<string>)MailServer::MailPrevention["RBLList"]:[],NewRLBServer);
	    UI::CloseDialog();
	    CIDRBL = NewRLBServer;
	  } else if(ret == `AddNewSender) {
	    string NewSender       = (string)UI::QueryWidget(`id(`NewSender),       `Value);
	    string NewSenderAction = (string)UI::QueryWidget(`id(`NewSenderAction), `Value);
	    string NewSenderOption = (string)UI::QueryWidget(`id(`NewSenderOption), `Value);
	    map SenderRestriction  = $[  "MailClient":NewSender,
	                                 "MailAction":NewSenderAction + " " + NewSenderOption
	                              ];
	    MailServer::MailPrevention["AccessList"] = add((list<map>)MailServer::MailPrevention["AccessList"]:[],SenderRestriction);
	    UI::CloseDialog();
	    CID = NewSender;
	  }else if(ret == `RBLDelete){
	    string Server = (string)UI::QueryWidget(`id(`RBLList),`CurrentItem);
	    list<string>  RBLList =  (list<string>)MailServer::MailPrevention["RBLList"]:[];
	    MailServer::MailPrevention["RBLList"] = [];
	    foreach(string my_item, RBLList, ``{
	       if( my_item != Server) {
	          MailServer::MailPrevention["RBLList"] = add(MailServer::MailPrevention["RBLList"]:[],my_item);
	       }
	    });
	  }else if(ret == `AccessDelete){
	    string Sender = (string)(UI::QueryWidget(`id(`table), `CurrentItem));
	    list<map<string,string> > AccessList = (list<map<string,string> >)MailServer::MailPrevention["AccessList"]:[];
	    MailServer::MailPrevention["AccessList"] = [];
	    foreach(map<string,string> my_item, AccessList, ``{
	       if( my_item["MailClient"]:"" != Sender ){
	         MailServer::MailPrevention["AccessList"] = add(MailServer::MailPrevention["AccessList"]:[],my_item);
	       }
	    });
	  } else if(ret == "off") {
            MailServer::MailPrevention["BasicProtection"] = "off";
	  } else if(ret == "medium") {
            MailServer::MailPrevention["BasicProtection"] = "medium";
	  } else if(ret == "hard") {
            MailServer::MailPrevention["BasicProtection"] = "hard";
	  } else if(ret == `VirusScanning) {
            if((boolean) UI::QueryWidget(`id(`VirusScanning), `Value)) {
               MailServer::MailPrevention["VirusScanning"] = "1";
            } else {
               MailServer::MailPrevention["VirusScanning"] = "0";
            }
          }
          content        = MailPreventionDialog(CID,CIDRBL);
          helptext       = HELPS["MailPrevention"]:"Bla Bla Bla";
        } else if(FocusedContent == "MailRelaying") {
           MailServer::MailRelaying["Changed"]            = true;
	   string SMTPDTLSMode = (string)UI::QueryWidget(`id(`SMTPDTLSMode), `CurrentButton);
           if(ret == `AddNewNetwork) {
             string NewNetwork = (string)UI::QueryWidget(`id(`NewNetwork), `Value);
             //TODO Checking if network is a real network
             MailServer::MailRelaying["TrustedNetworks"] = add((list<string>)MailServer::MailRelaying["TrustedNetworks"]:[],NewNetwork);
           }
	   if(ret == `DeleteNetwork){
	     string CurrentNetwork = (string)UI::QueryWidget(`id(`TrustedNetworks), `CurrentItem);
	     MailServer::MailRelaying["TrustedNetworks"] = filter(string network, MailServer::MailRelaying["TrustedNetworks"]:[],
	                                                          {return network != CurrentNetwork;});
	   }
           MailServer::MailRelaying["SMTPDTLSMode"]  = SMTPDTLSMode;
           if((boolean)UI::QueryWidget(`id(`RequireSASL), `Value)){
             MailServer::MailRelaying["RequireSASL"] = "1";
           } else {
             MailServer::MailRelaying["RequireSASL"] = "0";
           }
           if((boolean)UI::QueryWidget(`id(`UserRestriction), `Value)){
	     //TODO It must be fixed!!!!
             MailServer::MailRelaying["UserRestriction"] = "1";
             MailServer::MailRelaying["RequireSASL"]     = "1";
	     if(SMTPDTLSMode != "enforce" && SMTPDTLSMode != "auth_only") {
	        MailServer::MailRelaying["SMTPDTLSMode"]    = "enforce";
             }
           } else {
             MailServer::MailRelaying["UserRestriction"] = "0";
           }
           content        = MailRelayingDialog();
           helptext       = HELPS["MailRelaying"]:"Bla Bla Bla";
        }
        if(ret == "GlobalSettings" && FocusedContent != "GlobalSettings") {
           content        = GlobalSettingsDialog();
           helptext       = HELPS["GlobalSettings"]:"Bla Bla Bla";
           focus_changed  = true;
           FocusedContent ="GlobalSettings";
        } else if(ret == "MailTransports" && FocusedContent != "MailTransports") {
           content        = MailTransportsDialog("");
           helptext       = HELPS["MailTransports"]:"Bla Bla Bla";
           focus_changed  = true;
           FocusedContent ="MailTransports";
        } else if(ret == "MailPrevention" && FocusedContent != "MailPrevention") {
           content        = MailPreventionDialog(CID,CIDRBL);
           helptext       = HELPS["MailPrevention"]:"Bla Bla Bla";
           focus_changed  = true;
           FocusedContent ="MailPrevention";
        } else if(ret == "MailRelaying" && FocusedContent != "MailRelaying") {
           content        = MailRelayingDialog();
           helptext       = HELPS["MailRelaying"]:"Bla Bla Bla";
           focus_changed  = true;
           FocusedContent ="MailRelaying";
        } else if(ret == "MailLocalDelivery" && FocusedContent != "MailLocalDelivery") {
           content        = MailLocalDeliveryDialog();
           helptext       = HELPS["MailLocalDelivery"]:"Bla Bla Bla";
           focus_changed  = true;
           FocusedContent ="MailLocalDelivery";
        } else if(ret == "FetchingMail" && FocusedContent != "FetchingMail") {
           content        = FetchingMailDialog();
           helptext       = HELPS["FetchingMail"]:"Bla Bla Bla";
           focus_changed  = true;
           FocusedContent ="FetchingMail";
        } else if(ret == "MailLocalDomains" && FocusedContent != "MailLocalDomains") {
           content        = MailLocalDomainsDialog();
           helptext       = HELPS["MailLocalDomains"]:"Bla Bla Bla";
           focus_changed  = true;
           FocusedContent ="MailLocalDomains";
        }
y2milestone("event %1",event);
y2milestone("event %1",ret);
y2milestone("FocusedContent %1",FocusedContent);
        if(ret != `cancel && ret != `abort && ret != `next ) {
          Wizard::SetContents(_("Mail Server Configuration"), content ,helptext, false, true);
          UI::WizardCommand(`SetBackButtonLabel( "" ) );
          UI::WizardCommand(`SetNextButtonLabel( _("Save") ) );
	  UI::ChangeWidget(`id(`table), `CurrentItem, CID);
        }
   }

   return ret;
}

/**
 * Configure1 dialog
 * @return dialog result
 */
any Configure1Dialog () {

    /* MailServer configure1 dialog caption */
    string caption = _("MailServer Configuration");

    /* MailServer configure1 dialog contents */
    term contents = `Label (_("First part of configuration of mail-server"));

    Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/**
 * Configure2 dialog
 * @return dialog result
 */
any Configure2Dialog () {

    /* MailServer configure2 dialog caption */
    string caption = _("MailServer Configuration");

    /* MailServer configure2 dialog contents */
    term contents = `Label (_("Second part of configuration of mail-server"));

    Wizard::SetContentsButtons(caption, contents, HELPS["c2"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
