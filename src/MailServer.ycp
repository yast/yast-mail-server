/**
 * File:	modules/MailServer.ycp
 * Package:	Configuration of mail-server
 * Summary:	MailServer settings, input and output functions
 * Authors:	Peter Varkoly <varkoly@suse.de>
 *
 * $Id$
 *
 * Representation of the configuration of mail-server.
 * Input and output routines.
 */

{

module "MailServer";
textdomain "mail-server";

import "Progress";
import "Report";
import "Summary";
import "YaPI::MailServer";

/**
 * Prototypes
 */
global boolean Modified();

/**
 * Data was modified?
 */
global boolean modified = false;

/**
 */
global boolean proposal_valid = false;

/**
 * Write only, used during autoinstallation.
 * Don't run services and SuSEconfig, it's all done at one place.
 */
global boolean write_only = false;

/**
 * Abort function
 * return boolean return true if abort
 */
global boolean() AbortFunction = Modified;

/**
 * Abort function
 * @return blah blah lahjk
 */
global define boolean Abort() ``{
//    if(AbortFunction != nil)
//	return eval(AbortFunction) == true;
    return false;
}

/**
 * Data was modified?
 * @return true if modified
 */
global boolean Modified() {
    y2debug("modified=%1",modified);
}

// Settings: Define all variables needed for configuration of mail-server
/**
 * Map of the mail server global settings.
 */
global map<string,any>  GlobalSettings = $[];

/**
 * Map of the mail transport settings.
 */
global map<string,any>  MailTransports = $[];

/**
 * Map of the mail server prevention settings.
 */
global map<string,any>  MailPrevention = $[];

/**
 * Map of the mail server relaying settings.
 */
global map<string,any>  MailRelaying = $[];

/**
 * Map of the mail server local delivery settings.
 */
global map<string,any>  MailLocalDelivery = $[];

/**
 * Map of the mail server fetching mail jobs.
 */
global map<string,any>  FetchingMail = $[];

/**
 * Map of the mail server local domains.
 */
global map<string,any>  MailLocalDomains = $[];

/**
 * Map of the mail server local domains.
 */
global map<string,any>  LDAPDefaults = $[];

/**
 * Some additional parameter needed for the configuration.
 */
global string AdminUser   = "";
global string AdminDN     = "";
global string AdminPasswd = "";

/**
 * Read all mail-server settings
 * @return true on success
 */
global symbol Read() {

    /* MailServer read dialog caption */
    string caption = _("Reading the Mail Server Settings");

    integer steps = 9;

    integer sl = 500;
    sleep(sl);

    // We do not set help text here, because it was set outside
    Progress::New( caption, "", steps, [
	    /* Progress stage 0/7 */
	    _("Mail Server Administrator Authorization."),
	    /* Progress stage 1/7 */
	    _("Read Mail Server Global Settings"),
	    /* Progress stage 2/7 */
	    _("Read Mail Server Transports"),
	    /* Progress stage 3/7 */
	    _("Read Mail Server Prevention Settings"),
	    /* Progress stage 4/7 */
	    _("Read Mail Server Relaying Settings"),
	    /* Progress stage 5/7 */
	    _("Read Mail Server Local Delivery Settings"),
	    /* Progress stage 6/3 */
	    _("Read Mail Fetching Jobs"),
	    /* Progress stage 7/7 */
	    _("Read Mail Server Domains")

	], [
	    /* Progress stage 1/7 */
	    _("Reading Mail Server Global Settings"),
	    /* Progress stage 2/7 */
	    _("Reading Mail Server Transports"),
	    /* Progress stage 3/7 */
	    _("Reading Mail Server Prevention Settings"),
	    /* Progress stage 4/7 */
	    _("Reading Mail Server Relaying Settings"),
	    /* Progress stage 5/7 */
	    _("Reading Mail Server Local Delivery Settings"),
	    /* Progress stage 6/3 */
	    _("Reading Mail Fetching Jobs"),
	    /* Progress stage 7/7 */
	    _("Reading Mail Server Domains"),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // read  global settings
    if(Abort()) return `abort;
    Progress::NextStage();
    LDAPDefaults = (map<string,any>) YaPI::MailServer::ReadLDAPDefaults(AdminUser,AdminPasswd);
    /* Error message */
    if(LDAPDefaults == nil) {
		Report::Error(_("Cannot Authorizate the Mail Server Administrator."));
		return `back;
    }
    sleep(sl);

    // read  global settings
    if(Abort()) return `abort;
    Progress::NextStage();
    GlobalSettings = (map<string,any>) YaPI::MailServer::ReadGlobalSettings(AdminDN,AdminPasswd);
    /* Error message */
    if(GlobalSettings == nil) Report::Error(_("Cannot read the mail server global settings."));
    sleep(sl);

    // read mail transports
    if(Abort()) return `abort;
    Progress::NextStep();
    MailTransports = (map<string,any>) YaPI::MailServer::ReadMailTransports(AdminDN,AdminPasswd);
    /* Error message */
    if(MailTransports == nil) Report::Error(_("Cannot read mail server transports."));
    sleep(sl);

    // read mail preventions
    if(Abort()) return `abort;
    Progress::NextStage();
    MailPrevention = (map<string,any>) YaPI::MailServer::ReadMailPrevention(AdminDN,AdminPasswd);
    /* Error message */
    if(MailPrevention == nil) Report::Error(_("Cannot read mail server preventions."));
    sleep(sl);

    // read mail realaying
    if(Abort()) return `abort;
    Progress::NextStage();
    MailRelaying = (map<string,any>) YaPI::MailServer::ReadMailRelaying(AdminDN,AdminPasswd);
    /* Error message */
    if(MailRelaying == nil) Report::Warning(_("Cannot read the mail server relay settings."));
    sleep(sl);

    // read mail local delivery
    if(Abort()) return `abort;
    Progress::NextStage();
    MailLocalDelivery = (map<string,any>) YaPI::MailServer::ReadMailLocalDelivery(AdminDN,AdminPasswd);
    /* Error message */
    if(MailLocalDelivery == nil) Report::Warning(_("Cannot read the mail server local delivery settings."));
    sleep(sl);

    // read mail server fetching jobs
    if(Abort()) return `abort;
    Progress::NextStage();
    FetchingMail = (map<string,any>) YaPI::MailServer::ReadFetchingMail(AdminDN,AdminPasswd);
    /* Error message */
    if(FetchingMail == nil) Report::Warning(_("Cannot read the mail server fetching jobs."));
    sleep(sl);

    // read mail server local domains
    if(Abort()) return `abort;
    Progress::NextStage();
    MailLocalDomains = (map<string,any>) YaPI::MailServer::ReadMailLocalDomains(AdminDN,AdminPasswd);
    /* Error message */
    if(MailLocalDomains == nil) Report::Warning(_("Cannot read the mail server domains."));
    sleep(sl);

    if(Abort()) return `abort;
    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    if(Abort()) return `abort;
    return `next;
}

/**
 * Write all mail-server settings
 * @return true on success
 */
global boolean Write() {

    /* MailServer read dialog caption */
    string caption = _("Saving Mail Server Configuration");

    integer steps = 8;

    integer sl = 500;
    sleep(sl);

    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", steps, [
	    /* Progress stage 1/7 */
	    _("Write Mail Server Global Settings"),
	    /* Progress stage 2/7 */
	    _("Write Mail Server Transports"),
	    /* Progress stage 3/7 */
	    _("Write Mail Server Prevention Settings"),
	    /* Progress stage 4/7 */
	    _("Write Mail Server Relaying Settings"),
	    /* Progress stage 5/7 */
	    _("Write Mail Server Local Delivery Settings"),
	    /* Progress stage 6/3 */
	    _("Write Mail Fetching Jobs"),
	    /* Progress stage 7/7 */
	    _("Write Mail Server Domains")
	], [
	    /* Progress stage 1/7 */
	    _("Writing Mail Server Global Settings"),
	    /* Progress stage 2/7 */
	    _("Writing Mail Server Transports"),
	    /* Progress stage 3/7 */
	    _("Writing Mail Server Prevention Settings"),
	    /* Progress stage 4/7 */
	    _("Writing Mail Server Relaying Settings"),
	    /* Progress stage 5/7 */
	    _("Writing Mail Server Local Delivery Settings"),
	    /* Progress stage 6/3 */
	    _("Writing Mail Fetching Jobs"),
	    /* Progress stage 7/7 */
	    _("Writing Mail Server Domains"),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // write  global settings
    if(Abort()) return false;
    Progress::NextStage();
    if( GlobalSettings["Changed"]:false ) {
      if( ! YaPI::MailServer::WriteGlobalSettings(GlobalSettings,AdminDN,AdminPasswd) ) {
         Report::Error(_("Cannot write the mail server global settings."));
      }
    }
    sleep(sl);

    // write mail transports
    if(Abort()) return false;
    Progress::NextStep();
    if( MailTransports["Changed"]:false ) {
      if( ! YaPI::MailServer::WriteMailTransports(MailTransports,AdminDN,AdminPasswd) ) {
         Report::Error(_("Cannot write mail server transports."));
      }
    }
    sleep(sl);

    // write mail preventions
    if(Abort()) return false;
    Progress::NextStage();
    if( MailPrevention["Changed"]:false ) {
      if( ! YaPI::MailServer::WriteMailPrevention(MailPrevention,AdminDN,AdminPasswd) ) {
         Report::Error(_("Cannot write mail server preventions."));
      }
    }
    sleep(sl);

    // write mail realaying
    if(Abort()) return false;
    Progress::NextStage();
    if( MailRelaying["Changed"]:false ) {
      if( ! YaPI::MailServer::WriteMailRelaying(MailRelaying,AdminDN,AdminPasswd) ) {
        Report::Warning(_("Cannot write the mail server relay settings."));
      }
    }
    sleep(sl);

    // write mail local delivery
    if(Abort()) return false;
    Progress::NextStage();
    if( MailLocalDelivery["Changed"]:false ) {
      if( ! YaPI::MailServer::WriteMailLocalDelivery(MailLocalDelivery,AdminDN,AdminPasswd) ) {
        Report::Warning(_("Cannot write the mail server local delivery settings."));
      }
    }
    sleep(sl);

    // write mail server fetching jobs
    if(Abort()) return false;
    Progress::NextStage();
    if( FetchingMail["Changed"]:false ) {
      if( ! YaPI::MailServer::WriteFetchingMail(FetchingMail,AdminDN,AdminPasswd) ) {
        Report::Warning(_("Cannot write the mail server fetching jobs."));
      }
    }
    sleep(sl);

    // write mail server local domains
    if(Abort()) return false;
    Progress::NextStage();
    if( MailLocalDomains["Changed"]:false ) {
      if( ! YaPI::MailServer::WriteMailLocalDomains(MailLocalDomains,AdminDN,AdminPasswd) ) {
         Report::Warning(_("Cannot write the mail server domains.")); 
      }
    }
    sleep(sl);

    if(Abort()) return false;
    return true;
}

/**
 * Get all mail-server settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global boolean Import (map settings) {
    // TODO FIXME: your code here (fill the above mentioned variables)...
    return true;
}

/**
 * Dump the mail-server settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global map Export () {
    // TODO FIXME: your code here (return the above mentioned variables)...
    return $[];
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
global list Summary() {
    // TODO FIXME: your code here...
    /* Configuration summary text for autoyast */
    return [ _("Configuration summary ..."), [] ];
}

/**
 * Create an overview table with all configured cards
 * @return table items
 */
global list Overview() {
    // TODO FIXME: your code here...
    return [];
}

/**
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
global map AutoPackages() {
    // TODO FIXME: your code here...
    return $[ "install":[], "remove":[] ];
}

/* EOF */
}
