/**
 * File:
 *    users_plugin_mail_groups.ycp
 *
 * Package:
 *    Configuration of Mail Server + Group
 *
 * Summary:
 *    This is part GUI of UsersPluginMailGroups - plugin for editing mail server
 *    group attributes. (Shared folders)
 *
 * Authors:     Peter Varkoly <varkoly@suse.de>
 *
 *
 * $Id$
 */


{
    textdomain "MailServer"; // use own textdomain for new plugins

    import "Label";
    import "Popup";
    import "Report";
    import "Wizard";
    import "Hostname";

    import "Ldap";
    import "LdapPopup";
    import "Users";
    import "UsersLDAP";
    import "UsersPluginMailGroups"; // plugin module

    import "YaPI::MailServer";

    any ret = nil;
    string func            = "";
    map<string,any> config    = $[];
    map<string,any> data    = $[];
    string          imapadmpw         = Ldap::bind_pass;
    map<string,any> MailLocalDelivery = (map<string,any>)YaPI::MailServer::ReadMailLocalDelivery(imapadmpw);

    /* Check arguments */
    if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
    func = (string) WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
        config = (map<string,any>)WFM::Args(1);
    if(size(WFM::Args()) > 2 && is(WFM::Args(2), map))
        data = (map<string,any>)WFM::Args(2);
    }
    y2milestone("----------------------------------------");
    y2milestone("users plugin started: Mail");

    y2debug ("func=%1", func);
    y2debug ("config=%1", config);
    y2debug ("data=%1", data);

    if (func == "Summary") {
       ret = UsersPluginMailGroups::Summary (config, $[]);
    }
    else if (func == "Name") {
       ret = UsersPluginMailGroups::Name (config, $[]);
    }
    else if (func == "Dialog") {
        // define the dialog for this plugin and return it's contents

        string caption        = UsersPluginMailGroups::Name (config, $[]);
        string what           = config["what"]:"group";
        string action         = data["what"]:"";
	boolean enableMailbox = true;

        map<string, any> tmp_data    = $[];
        list<string>    object_class = (list<string>)sort (data["objectclass"]:[]);

        // if this plugin wasn't present in default plugin set, we have to call
        // BeforeAdd/BeforeEdit e.g. to get object class!
        if (!contains (data["plugins"]:[], "UsersPluginMailGroups"))
        {
            if ( action == "add_group")
	    {
                data = UsersPluginMailGroups::AddBefore (config, data);
            } else if (action == "edit_group") {
                data = UsersPluginMailGroups::EditBefore (config, data);
	    }
            object_class = (list<string>)sort (data["objectclass"]:[]);
            tmp_data["objectclass"]    = object_class;
        }

        // helptext 1/1
        string help_text = _("<p>In this dialog You can configure the mail settings of a group.</p>"); 

        term mbox = `Frame ( _("Shared Mailbox"),
                      `VBox(
                         `Left(
                           `CheckBox( `id(`enableMailbox ), `opt(`notify),
                                  _("&Enable Shared Mailbox"), enableMailbox
                            )
                          )
                       )
                    );

        integer intimapquota = -1;
        if (haskey (data, "imapquota")
            && data["imapquota"]:"10000" != nil)
        {
            intimapquota = tointeger ((string) data["imapquota"]:"10000" );
        }
        term imap = `Frame ( _("IMAP Quota"),
                      `VBox(
                        `HBox(
                          `IntField (`id(`imapquota), _("in &kByte"), 1, 10000000,
                                  intimapquota >= 0 ? intimapquota : 10000),
                          `HStretch()
                         ),
                        `Left(
			   `Label(sformat (_("IMAP quota already in use: %1 kByte"),
                               data["imapquotaused"]:"0" != nil ? data["imapquotaused"]:"0":"0")
			    )
			  ),
                         `Left(
			   `CheckBox( `id(`enableImpapquota ), `opt(`notify), _("Enable IMAP &Quota"), intimapquota >= 0)
			  )
                       )
                 );

        term contents = `HBox(
	                  `HSpacing (1.5),
                            `VBox(
                              `VSpacing(0.5),
			       mbox,
                              `VSpacing(0.5),
                               imap
                             ),
                           `HSpacing (1.5)
                         );

        Wizard::CreateDialog ();
        Wizard::SetDesktopIcon("group");

        // dialog caption
        Wizard::SetContentsButtons(_("Mail Settings"), contents, help_text, Label::BackButton(), Label::NextButton());

        Wizard::HideAbortButton ();

        ret = `next;
            // UI::SetFocus (`id(`table));
        repeat
        {
            ret = UI::UserInput();

            if ( ret == `next )
            {
                // Mailbox is not neccesary
                if ( ! (boolean) UI::QueryWidget(`id(`enableMailbox), `Value))
		{
		  if (!contains (data["plugins"]:[], "UsersPluginMailGroups"))
		  {
                       data["plugins_to_remove"] = add (data["plugins_to_remove"]:[], "UsersPluginMailGroups");
		  }
		} else {
                   string err = UsersPluginMailGroups::Check ( config, (map<string,any>) union (data, tmp_data));
                   if (err != "")
                   {
                       Report::Error (err);
                       ret = `notnext;
                       continue;
                   }
                   // if this plugin wasn't in default set, we must save its name
                   if (!contains (data["plugins"]:[], "UsersPluginMailGroups"))
                   {
                       data["plugins"] = add (data["plugins"]:[], "UsersPluginMailGroups");
                   }
                   if ((boolean) UI::QueryWidget(`id(`enableImpapquota), `Value))
                   {
                       data["imapquota"] = (integer) UI::QueryWidget(`id(`imapquota), `Value);
                   }
                   else
                   {
                       data["imapquota"] = -1;
                   }
                   if (data["what"]:"" == "edit_group")
                   {
                       Users::EditGroup(data);
                   }
                   else if (data["what"]:"" == "add_group")
                   {
                       Users::AddGroup(data);
                   }
               }
            }
        } until (is(ret,symbol) && contains ([`next, `abort, `back, `cancel], (symbol) ret));

        Wizard::CloseDialog ();
    }
    /* unknown function */
    else {
    y2error("unknown function: %1", func);
        ret = false;
    }

    y2debug ("ret=%1", ret);
    y2milestone("users plugin finished");
    y2milestone("----------------------------------------");

    return ret;
}
