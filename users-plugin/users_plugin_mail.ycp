/**
 * File:
 *	users_plugin_ldap_all.ycp
 *
 * Package:
 *	Configuration of Users
 *
 * Summary:
 *	This is part GUI of UsersPluginMail - plugin for editing all LDAP
 *	user/group attributes.
 *
 * $Id$
 */


{
    textdomain "MailServer"; // use own textdomain for new plugins

    import "Label";
    import "Popup";
    import "Report";
    import "Wizard";
    import "Hostname";

    import "Ldap";
    import "LdapPopup";
    import "Users";
    import "UsersLDAP";
    import "UsersPluginMail"; // plugin module

    import "YaPI::MailServer";

    any ret = nil;
    string func			= "";
    map<string,any> config	= $[];
    map<string,any> data	= $[];
    string          imapadmpw         = Ldap::bind_pass;
    map<string,any> MailLocalDomains  = (map<string,any>)YaPI::MailServer::ReadMailLocalDomains(imapadmpw);
    map<string,any> MailLocalDelivery = (map<string,any>)YaPI::MailServer::ReadMailLocalDelivery(imapadmpw);

    /**
     * See RFC 2822, 3.4
     * But for now, no-spaces@valid_domainname
     * @param address an address to check
     * @return valid?check_mail_address
     */
    define boolean check_mail_address (string address) ``{
	list<string> parts = splitstring (address, "@");
	if (size (parts) != 2)
	{
	    return false;
	}
	string address = parts[0]:"";

	return address != "" &&
	    findfirstof (address, " ") == nil &&
	    Hostname::CheckDomain (parts[1]:"");
    }

    /**
     * Edit EMAIL Address
     *
     * @param old EMAIL
     * @return new EMAIL or old EMAIL, if the user abort the dialog
     */
    define string editEMAIL(string email)``{

	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Change E-Mail")),
				      `VSpacing (1),
				      `TextEntry( `id (`entry), _("&E-Mail Address:"), email),
				      `VSpacing (1),
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)
				      ),
			       `HSpacing (2)
			       )
			);

	UI::SetFocus (`id(`entry));
	symbol ui = nil;
	string newEmail = "";
	repeat
	    {
		ui = (symbol) UI::UserInput ();
		newEmail = (string) UI::QueryWidget(`id(`entry), `Value);
		if (!check_mail_address (newEmail))
		{
		    Popup::Error(_("Invalid e-mail format."));
		    ui = `again;
		}
	    }
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();
	if (ui == `ok
	    && size (newEmail) > 0)
	{
	    return newEmail;
	}
	else
	{
	    return email;
	}
    }



    /**
     * Creates EMAIL items
     * @return a list EMAIL items formated for a UI table
     */
    define list<term> getEMAILList () ``{
        list<term> result = [];
        integer i = 0;

	if( is(data["susemailacceptaddress"]:(any)"", string)
	    && size (data["susemailacceptaddress"]:"") > 0 )
	{
		result = [`item (`id (i),
				 data["susemailacceptaddress"]:"")];
		// transforming to list
		data["susemailacceptaddress"] = [data["susemailacceptaddress"]:""];
	}
	else if ( is(data["susemailacceptaddress"]:(any)[], list) )
	{
		foreach (string element, data["susemailacceptaddress"]:[], ``{
		    result = add (result, `item (`id (i), element));
		    i = i + 1;
		});
	}

        return result;
    }

    /**
     * Creates EMAIL items
     * @return a list EMAIL items formated for a UI table
     */
    define list<string> getDomainList () ``{
	list<string>    Domains          = [];
        foreach(map Domain, MailLocalDomains["Domains"]:[], ``{
		if(Domain["Type"]:"" != "none")
		{
			Domains = add( Domains,Domain["Name"]:"");
		}
	});
	return Domains;
    }

    /* Check arguments */
    if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
	func = (string) WFM::Args(0);
	if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	    config = (map<string,any>)WFM::Args(1);
	if(size(WFM::Args()) > 2 && is(WFM::Args(2), map))
	    data = (map<string,any>)WFM::Args(2);
    }
    y2milestone("----------------------------------------");
    y2milestone("users plugin started: Mail");
    y2milestone("config=%1", config);

    y2debug ("func=%1", func);
    y2debug ("config=%1", config);
    y2debug ("data=%1", data);

    if (func == "Summary") {
	ret = UsersPluginMail::Summary (config, $[]);
    }
    else if (func == "Name") {
	ret = UsersPluginMail::Name (config, $[]);
    }
    else if (func == "Dialog") {
	// define the dialog for this plugin and return it's contents

	string caption	= UsersPluginMail::Name (config, $[]);
	string what	= config["what"]:"user";
	string action	= data["what"]:"";

	map<string, any> tmp_data	= $[];
	list<string> object_class = (list<string>)sort (data["objectclass"]:[]);

	// if this plugin wasn't present in default plugin set, we have to call
	// BeforeAdd/BeforeEdit e.g. to get object class!
	if (!contains (data["plugins"]:[], "UsersPluginMail"))
	{
	    if (action == "add_user" || action == "add_group")
		data = UsersPluginMail::AddBefore (config, data);
	    else if (action == "edit_user" || action == "edit_group")
		data = UsersPluginMail::EditBefore (config, data);
	    object_class = (list<string>)sort (data["objectclass"]:[]);
	    tmp_data["objectclass"]	= object_class;
	}

	// helptext 1/3
	string help_text = _("<p>In this dialog You can configure the mail settings of an user .</p>") +

	// helptext 2/3
	(_("<p>First you can set the mail addresses and aliases for the user.</p>")) +

	// helptext 3/3
	_("<p>If you have selected \"cyrus\" for the local delivery of mails, you can set the size limit for the users mail box.
	   If you do not set any value the mail box size is unlimited.</p>");

        term items			= nil;
        list used_attributes	= [];
        list new_attributes		= [];
        boolean modified		= false;
        list<term>   emailTermList = getEMAILList ();
        list<string> DomainList    = getDomainList ();

        term buttons = `VBox ();
	// To translators: pushbutton label
	buttons = add (buttons,  `HBox ( `HWeight (1, `PushButton (`id (`deleteEmail), `opt (`key_F5), Label::DeleteButton()))));
	buttons = add (buttons,  `HBox ( `HWeight (1, `PushButton (`id (`editEmail), `opt (`key_F4), Label::EditButton()))));
        buttons = add (buttons, `VStretch());
	// To translators: pushbutton label
        buttons = add (buttons,  `HBox ( `HWeight(1, `PushButton (`id (`addEmail), `opt (`key_F3), Label::AddButton()))));

	term editEmail = `VBox ();
	editEmail = add (editEmail, `HBox(
					  `VSpacing(5),
					  `Table (`id (`table), `opt (`notify, `immediate),
                                          `header (
                                              // To translators: table headers
					      // please let the spaces
                                              _("E-Mail Addresses                        ")),
                                          emailTermList)));
	editEmail = add (editEmail, `HBox(
					`TextEntry (`id (`id_emailname ), " " ),
					`VBox(`Label(" "),`Label("@")),
					`ComboBox(`id(`domain), "", DomainList)
				    )
		        );

        term emails = `HBox ();
        emails = add (emails, `HWeight (3, editEmail));
        emails = add (emails, `HWeight (1, buttons));

	term    imap     = `VBox();
	integer intimapquota = -1;
	if (haskey (data, "imapquota")
	    && data["imapquota"]:"10000" != nil)
	{
	    intimapquota = tointeger ((string) data["imapquota"]:"10000" );
	}

	if(data["localdeliverytype"]:"local" == "cyrus" ) {
	     imap   = `Frame ( _("IMAP Quota"),
			`VBox(
				 `HBox(
				       `IntField (`id(`imapquota), _("in kByte"), 1, 10000000,
						  intimapquota >= 0 ? intimapquota : 10000),
				       `HStretch()
				       ),
				 `Left(`Label(sformat (_("IMAP quota already in use: %1 kByte"),
						 data["imapquotaused"]:"0" != nil ? data["imapquotaused"]:"0":"0"))),
				 `Left(`CheckBox( `id(`enableImpapquota ), `opt(`notify), _("Enable IMAP Quota"),
						  intimapquota >= 0
						  ))
			)
		);
	}


	term contents = `HBox(`HSpacing (1.5),
			      `VBox(
				  `VSpacing(0.5),
				  emails,
				  `VSpacing(0.5),
				  imap
			      ),
			      `HSpacing (1.5)
			      );

	Wizard::CreateDialog ();
        Wizard::SetDesktopIcon("users");

	// dialog caption
	Wizard::SetContentsButtons(_("Mail Settings"),
				   contents, help_text, Label::BackButton(), Label::NextButton());

	Wizard::HideAbortButton ();

	ret = `next;
        // UI::SetFocus (`id(`table));
	repeat
	{
            UI::ChangeWidget (`id (`deleteEmail), `Enabled, UI::QueryWidget (`id (`table), `CurrentItem) != nil);
            UI::ChangeWidget (`id (`editEmail), `Enabled, UI::QueryWidget (`id (`table), `CurrentItem) != nil);
            if(data["localdeliverytype"]:"local" == "cyrus" ) {
               UI::ChangeWidget(`id(`imapquota), `Enabled, ((boolean) UI::QueryWidget(`id(`enableImpapquota), `Value)));
            }

	    ret = UI::UserInput();

	    if (ret == `addEmail)
	    {
		string emailName = (string) UI::QueryWidget(`id(`id_emailname), `Value) + "@" + (string) UI::QueryWidget(`id(`domain), `Value);

		if (size (emailName) > 0)
		{
		    if (check_mail_address (emailName))
		    {
			if (contains (data["susemailacceptaddress"]:[], emailName))
			{
			    Popup::Error(_("Entry already exists."));
			}
			else
			{
			    data["susemailacceptaddress"] = add (data["susemailacceptaddress"]:[],
								 emailName);
			    UI::ChangeWidget(`id(`table), `Items, getEMAILList ());
			    UI::ChangeWidget(`id(`id_emailname), `Value, "");
			}
		    }
		    else
		    {
		        Popup::Error(_("Invalid e-mail format."));
		    }
		}
	    }
	    if (ret == `deleteEmail)
	    {
		integer id = (integer) UI::QueryWidget (`id (`table), `CurrentItem);
		data["susemailacceptaddress"] = remove (data["susemailacceptaddress"]:[],
							id);
		UI::ChangeWidget(`id(`table), `Items, getEMAILList ());
	    }
	    if (ret == `editEmail)
	    {
		integer id = (integer) UI::QueryWidget (`id (`table), `CurrentItem);
		string oldEMAIL = (string)((list) data["susemailacceptaddress"]:[])[id]:"";
		string newEMAIL = editEMAIL (oldEMAIL);

		if (contains (data["susemailacceptaddress"]:[], newEMAIL))
		{
		    Popup::Error(_("Entry already exists."));
		}
		else
		{
		    data["susemailacceptaddress"] = remove (data["susemailacceptaddress"]:[],
							    id);
		    data["susemailacceptaddress"] = add (data["susemailacceptaddress"]:[],
							 newEMAIL);
		}
		UI::ChangeWidget(`id(`table), `Items, getEMAILList ());
	    }

	    if ( ret == `next )
	    {
		string err = UsersPluginMail::Check (
		    config,
		    (map<string,any>) union (data, tmp_data));

		if (err != "")
		{
		    Report::Error (err);
		    ret = `notnext;
		    continue;
		}

                // if this plugin wasn't in default set, we must save its name
                 if (!contains (data["plugins"]:[], "UsersPluginMail"))
		 {
		     data["plugins"] = add (data["plugins"]:[],
					    "UsersPluginMail");
		 }
		 if( size(data["susemailacceptaddress"]:[]) == 1 ) {
		     data["susemailacceptaddress"] = ((list)data["susemailacceptaddress"]:[])[0]:"";
		 } else if( size(data["susemailacceptaddress"]:[]) == 0 ) {
		     remove(data,"susemailacceptaddress");
		 }

                 if(data["localdeliverytype"]:"local" == "cyrus" ) {
		    if ((boolean) UI::QueryWidget(`id(`enableImpapquota), `Value))
		    {
		       data["imapquota"] = (integer) UI::QueryWidget(`id(`imapquota), `Value);
		    }
		    else
		    {
		       data["imapquota"] = -1;
		    }
		 }
		 if (data["what"]:"" == "edit_user")
		 {
		     Users::EditUser (data);
		 }
		 else if (data["what"]:"" == "add_user")
		 {
		     Users::AddUser (data);
		 }
		 else if (data["what"]:"" == "edit_group")
		 {
		     Users::EditGroup (data);
		 }
		 else if (data["what"]:"" == "add_group")
		 {
		     Users::AddGroup (data);
		 }
	    }
	} until (is(ret,symbol) &&
	    contains ([`next, `abort, `back, `cancel], (symbol) ret));

	Wizard::CloseDialog ();
    }
    /* unknown function */
    else {
	y2error("unknown function: %1", func);
	ret = false;
    }

    y2debug ("ret=%1", ret);
    y2milestone("users plugin finished");
    y2milestone("----------------------------------------");

    return ret;
}
